library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Telemetre_us is
  generic( period1 : integer := 500;
           period2 : integer := 3000000);
  port( clk : in std_logic;
        rst : in std_logic;
        trig: out std_logic;
        echo: in std_logic;
        LEDR: out std_logic_vector(7 downto 0)
        );
end entity;

architecture one of Telemetre_us is

signal trig_counter: unsigned(31 downto 0);
signal wait_counter: unsigned(31 downto 0);
signal output_trig : std_logic;
signal output_LEDR : std_logic_vector(7 downto 0);

begin

  count: process(rst, clk)
  begin
    if rst = '0' then
      trig_counter <= (others => '0');
      wait_counter <= (others => '0');
    elsif clk'event and clk = '1' then
      if trig_counter <= To_unsigned(period1,32) then
        trig_counter <= trig_counter + 1;
      else
        if wait_counter <= To_unsigned(period2,32) then
          wait_counter <= wait_counter + 1;
        else
          trig_counter <= (others => '0');
          wait_counter <= (others => '0');
        end if;
      end if;
    end if;
  end process;
  
  output_cycle: process(rst,clk)
  begin
    if rst = '0' then
      output_trig <= '0';
    elsif clk'event and clk = '1' then
      if trig_counter <= To_unsigned(period1,32) then
        output_trig <= '1';
      else
        ouput_trig <= '0';
      end if;
    end if;
  end process;
  
  LED: process(rst, clk)
  begin
    if rst = '0' then 
      output_LEDR <= (others => '0');
    elsif clk'event and clk = '1' then
      if echo = '0' then
        output_LEDR <= (others => '0');
      else
        output_LEDR <= (others => '1');
      end if;
    end if;
  end process;
  
  LEDR <= output_LEDR;
  trig <= output_trig;
  
end one;